We use the source from FinanceBench by University of Delaware:
"Accelerating Financial Applications on the GPU" which was presented at the Sixth Workshop on General Purpose Processing Using GPUs (GPGPU 6)

https://github.com/cavazos-lab/FinanceBench

For our experiments, we use the OpenMP version of Monte-Carlo application from the FinanceBench suite.
We made the following changes for our purpose:
(1) Changed the compiler optimization flags from '-O3 -march=native' to '-Ofast'
(2) We changed the compiler from g++ to CC, that points to the cray C++ compiler for this test.
(3) We modified the source around Line 140 in file monteCarloKernelsCpu.c (please see comment there). This change was to allow the use of thread safe rand_r() function instead of rand(), which enabled excellent parallel performance needed for this test.
(4) We also changed the number of samples to 10000000.

To build the source, just type 'make'
We use the targets 'craype-x86-genoa' and craype-x86-spr' to build for genoa and sapphire-rapids processor, respectively.

To run, we used:

env OMP_NUM_THREADS='n' ./monteCarloEngine.exe

